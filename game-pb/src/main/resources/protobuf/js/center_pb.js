// source: center.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.GameInfo', null, global);
goog.exportSymbol('proto.GamingInfo', null, global);
goog.exportSymbol('proto.PlayerBaseInfo', null, global);
goog.exportSymbol('proto.PushGameServerId', null, global);
goog.exportSymbol('proto.PushLoginCenter', null, global);
goog.exportSymbol('proto.ReqGameServerId', null, global);
goog.exportSymbol('proto.ReqLoginCenter', null, global);
goog.exportSymbol('proto.RoomInfo', null, global);
goog.exportSymbol('proto.SubCmd', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReqLoginCenter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReqLoginCenter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReqLoginCenter.displayName = 'proto.ReqLoginCenter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ReqGameServerId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ReqGameServerId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ReqGameServerId.displayName = 'proto.ReqGameServerId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PushGameServerId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PushGameServerId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PushGameServerId.displayName = 'proto.PushGameServerId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PushLoginCenter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PushLoginCenter.repeatedFields_, null);
};
goog.inherits(proto.PushLoginCenter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PushLoginCenter.displayName = 'proto.PushLoginCenter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GameInfo.repeatedFields_, null);
};
goog.inherits(proto.GameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GameInfo.displayName = 'proto.GameInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RoomInfo.displayName = 'proto.RoomInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerBaseInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerBaseInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerBaseInfo.displayName = 'proto.PlayerBaseInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GamingInfo.displayName = 'proto.GamingInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReqLoginCenter.prototype.toObject = function(opt_includeInstance) {
  return proto.ReqLoginCenter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReqLoginCenter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqLoginCenter.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReqLoginCenter}
 */
proto.ReqLoginCenter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReqLoginCenter;
  return proto.ReqLoginCenter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReqLoginCenter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReqLoginCenter}
 */
proto.ReqLoginCenter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReqLoginCenter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReqLoginCenter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReqLoginCenter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqLoginCenter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ReqGameServerId.prototype.toObject = function(opt_includeInstance) {
  return proto.ReqGameServerId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ReqGameServerId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqGameServerId.toObject = function(includeInstance, msg) {
  var f, obj = {
    servertype: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ReqGameServerId}
 */
proto.ReqGameServerId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ReqGameServerId;
  return proto.ReqGameServerId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ReqGameServerId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ReqGameServerId}
 */
proto.ReqGameServerId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServertype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ReqGameServerId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ReqGameServerId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ReqGameServerId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ReqGameServerId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServertype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 serverType = 1;
 * @return {number}
 */
proto.ReqGameServerId.prototype.getServertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ReqGameServerId} returns this
 */
proto.ReqGameServerId.prototype.setServertype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PushGameServerId.prototype.toObject = function(opt_includeInstance) {
  return proto.PushGameServerId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PushGameServerId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushGameServerId.toObject = function(includeInstance, msg) {
  var f, obj = {
    servertype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PushGameServerId}
 */
proto.PushGameServerId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PushGameServerId;
  return proto.PushGameServerId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PushGameServerId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PushGameServerId}
 */
proto.PushGameServerId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServertype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PushGameServerId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PushGameServerId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PushGameServerId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushGameServerId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServertype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 serverType = 1;
 * @return {number}
 */
proto.PushGameServerId.prototype.getServertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PushGameServerId} returns this
 */
proto.PushGameServerId.prototype.setServertype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 serverId = 2;
 * @return {number}
 */
proto.PushGameServerId.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PushGameServerId} returns this
 */
proto.PushGameServerId.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PushLoginCenter.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PushLoginCenter.prototype.toObject = function(opt_includeInstance) {
  return proto.PushLoginCenter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PushLoginCenter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushLoginCenter.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamelistList: jspb.Message.toObjectList(msg.getGamelistList(),
    proto.GameInfo.toObject, includeInstance),
    playerbaseinfo: (f = msg.getPlayerbaseinfo()) && proto.PlayerBaseInfo.toObject(includeInstance, f),
    gaminginfo: (f = msg.getGaminginfo()) && proto.GamingInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PushLoginCenter}
 */
proto.PushLoginCenter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PushLoginCenter;
  return proto.PushLoginCenter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PushLoginCenter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PushLoginCenter}
 */
proto.PushLoginCenter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GameInfo;
      reader.readMessage(value,proto.GameInfo.deserializeBinaryFromReader);
      msg.addGamelist(value);
      break;
    case 2:
      var value = new proto.PlayerBaseInfo;
      reader.readMessage(value,proto.PlayerBaseInfo.deserializeBinaryFromReader);
      msg.setPlayerbaseinfo(value);
      break;
    case 3:
      var value = new proto.GamingInfo;
      reader.readMessage(value,proto.GamingInfo.deserializeBinaryFromReader);
      msg.setGaminginfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PushLoginCenter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PushLoginCenter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PushLoginCenter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PushLoginCenter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamelistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GameInfo.serializeBinaryToWriter
    );
  }
  f = message.getPlayerbaseinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PlayerBaseInfo.serializeBinaryToWriter
    );
  }
  f = message.getGaminginfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.GamingInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GameInfo gameList = 1;
 * @return {!Array<!proto.GameInfo>}
 */
proto.PushLoginCenter.prototype.getGamelistList = function() {
  return /** @type{!Array<!proto.GameInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GameInfo, 1));
};


/**
 * @param {!Array<!proto.GameInfo>} value
 * @return {!proto.PushLoginCenter} returns this
*/
proto.PushLoginCenter.prototype.setGamelistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GameInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GameInfo}
 */
proto.PushLoginCenter.prototype.addGamelist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GameInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PushLoginCenter} returns this
 */
proto.PushLoginCenter.prototype.clearGamelistList = function() {
  return this.setGamelistList([]);
};


/**
 * optional PlayerBaseInfo playerBaseInfo = 2;
 * @return {?proto.PlayerBaseInfo}
 */
proto.PushLoginCenter.prototype.getPlayerbaseinfo = function() {
  return /** @type{?proto.PlayerBaseInfo} */ (
    jspb.Message.getWrapperField(this, proto.PlayerBaseInfo, 2));
};


/**
 * @param {?proto.PlayerBaseInfo|undefined} value
 * @return {!proto.PushLoginCenter} returns this
*/
proto.PushLoginCenter.prototype.setPlayerbaseinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PushLoginCenter} returns this
 */
proto.PushLoginCenter.prototype.clearPlayerbaseinfo = function() {
  return this.setPlayerbaseinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PushLoginCenter.prototype.hasPlayerbaseinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GamingInfo gamingInfo = 3;
 * @return {?proto.GamingInfo}
 */
proto.PushLoginCenter.prototype.getGaminginfo = function() {
  return /** @type{?proto.GamingInfo} */ (
    jspb.Message.getWrapperField(this, proto.GamingInfo, 3));
};


/**
 * @param {?proto.GamingInfo|undefined} value
 * @return {!proto.PushLoginCenter} returns this
*/
proto.PushLoginCenter.prototype.setGaminginfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PushLoginCenter} returns this
 */
proto.PushLoginCenter.prototype.clearGaminginfo = function() {
  return this.setGaminginfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PushLoginCenter.prototype.hasGaminginfo = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GameInfo.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    gametype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    servertype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roomlistList: jspb.Message.toObjectList(msg.getRoomlistList(),
    proto.RoomInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameInfo}
 */
proto.GameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameInfo;
  return proto.GameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameInfo}
 */
proto.GameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGametype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServertype(value);
      break;
    case 3:
      var value = new proto.RoomInfo;
      reader.readMessage(value,proto.RoomInfo.deserializeBinaryFromReader);
      msg.addRoomlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGametype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServertype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRoomlistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.RoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 gameType = 1;
 * @return {number}
 */
proto.GameInfo.prototype.getGametype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.GameInfo} returns this
 */
proto.GameInfo.prototype.setGametype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 serverType = 2;
 * @return {number}
 */
proto.GameInfo.prototype.getServertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GameInfo} returns this
 */
proto.GameInfo.prototype.setServertype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated RoomInfo roomList = 3;
 * @return {!Array<!proto.RoomInfo>}
 */
proto.GameInfo.prototype.getRoomlistList = function() {
  return /** @type{!Array<!proto.RoomInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.RoomInfo, 3));
};


/**
 * @param {!Array<!proto.RoomInfo>} value
 * @return {!proto.GameInfo} returns this
*/
proto.GameInfo.prototype.setRoomlistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.RoomInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.RoomInfo}
 */
proto.GameInfo.prototype.addRoomlist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.RoomInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.GameInfo} returns this
 */
proto.GameInfo.prototype.clearRoomlistList = function() {
  return this.setRoomlistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gametype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roomtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ante: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minjoin: jspb.Message.getFieldWithDefault(msg, 5, 0),
    minbet: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxbet: jspb.Message.getFieldWithDefault(msg, 7, 0),
    taxrate: jspb.Message.getFieldWithDefault(msg, 8, 0),
    conf: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomInfo}
 */
proto.RoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomInfo;
  return proto.RoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomInfo}
 */
proto.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGametype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomtype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAnte(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinjoin(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinbet(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxbet(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTaxrate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setConf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGametype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRoomtype();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAnte();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMinjoin();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMinbet();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMaxbet();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTaxrate();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getConf();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 roomId = 1;
 * @return {number}
 */
proto.RoomInfo.prototype.getRoomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setRoomid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 gameType = 2;
 * @return {number}
 */
proto.RoomInfo.prototype.getGametype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setGametype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 roomType = 3;
 * @return {number}
 */
proto.RoomInfo.prototype.getRoomtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setRoomtype = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 ante = 4;
 * @return {number}
 */
proto.RoomInfo.prototype.getAnte = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setAnte = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 minJoin = 5;
 * @return {number}
 */
proto.RoomInfo.prototype.getMinjoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setMinjoin = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 minBet = 6;
 * @return {number}
 */
proto.RoomInfo.prototype.getMinbet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setMinbet = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 maxBet = 7;
 * @return {number}
 */
proto.RoomInfo.prototype.getMaxbet = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setMaxbet = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 taxRate = 8;
 * @return {number}
 */
proto.RoomInfo.prototype.getTaxrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setTaxrate = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string conf = 9;
 * @return {string}
 */
proto.RoomInfo.prototype.getConf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.RoomInfo} returns this
 */
proto.RoomInfo.prototype.setConf = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerBaseInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerBaseInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerBaseInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerBaseInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 3, 0),
    headimg: jspb.Message.getFieldWithDefault(msg, 4, ""),
    headimgtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sex: jspb.Message.getFieldWithDefault(msg, 5, 0),
    viplevel: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerBaseInfo}
 */
proto.PlayerBaseInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerBaseInfo;
  return proto.PlayerBaseInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerBaseInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerBaseInfo}
 */
proto.PlayerBaseInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBalance(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadimg(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadimgtype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSex(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViplevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerBaseInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerBaseInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerBaseInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerBaseInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHeadimg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHeadimgtype();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSex();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getViplevel();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional int64 pid = 1;
 * @return {number}
 */
proto.PlayerBaseInfo.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerBaseInfo} returns this
 */
proto.PlayerBaseInfo.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.PlayerBaseInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerBaseInfo} returns this
 */
proto.PlayerBaseInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 balance = 3;
 * @return {number}
 */
proto.PlayerBaseInfo.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerBaseInfo} returns this
 */
proto.PlayerBaseInfo.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string headImg = 4;
 * @return {string}
 */
proto.PlayerBaseInfo.prototype.getHeadimg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayerBaseInfo} returns this
 */
proto.PlayerBaseInfo.prototype.setHeadimg = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 headImgType = 6;
 * @return {number}
 */
proto.PlayerBaseInfo.prototype.getHeadimgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerBaseInfo} returns this
 */
proto.PlayerBaseInfo.prototype.setHeadimgtype = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 sex = 5;
 * @return {number}
 */
proto.PlayerBaseInfo.prototype.getSex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerBaseInfo} returns this
 */
proto.PlayerBaseInfo.prototype.setSex = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 vipLevel = 7;
 * @return {number}
 */
proto.PlayerBaseInfo.prototype.getViplevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerBaseInfo} returns this
 */
proto.PlayerBaseInfo.prototype.setViplevel = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GamingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    gametype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    servertype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    serverid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamingInfo}
 */
proto.GamingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamingInfo;
  return proto.GamingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamingInfo}
 */
proto.GamingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGametype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServertype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGametype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getServertype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getServerid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 gameType = 1;
 * @return {number}
 */
proto.GamingInfo.prototype.getGametype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.GamingInfo} returns this
 */
proto.GamingInfo.prototype.setGametype = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 serverType = 2;
 * @return {number}
 */
proto.GamingInfo.prototype.getServertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GamingInfo} returns this
 */
proto.GamingInfo.prototype.setServertype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 serverId = 3;
 * @return {number}
 */
proto.GamingInfo.prototype.getServerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.GamingInfo} returns this
 */
proto.GamingInfo.prototype.setServerid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.SubCmd = {
  CMD_BEGIN: 0,
  CMD_REQLOGINCENTER: 2000,
  CMD_PUSHLOGINCENTER: 2001,
  CMD_REQGAMESERVERID: 2002,
  CMD_PUSHGAMESERVERID: 2003,
  CMD_REQFIXNICKNAME: 2004,
  CMD_PUSHFIXNICKNAME: 2006,
  CMD_REQFIXHEADPIC: 2008,
  CMD_PUSHFIXHEADPIC: 2010
};

goog.object.extend(exports, proto);
